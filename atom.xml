<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perkins4j2的技术博客</title>
  
  <subtitle>一个人,一根烧火棍,面对整个世界.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://perkins4j2.github.io/"/>
  <updated>2019-10-12T10:24:58.274Z</updated>
  <id>https://perkins4j2.github.io/</id>
  
  <author>
    <name>Perkins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NPM包管理工具</title>
    <link href="https://perkins4j2.github.io/posts/45569/"/>
    <id>https://perkins4j2.github.io/posts/45569/</id>
    <published>2019-10-12T10:23:51.000Z</published>
    <updated>2019-10-12T10:24:58.274Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;npm 是JavaScript 世界的包管理工具，并且是Node.js 平台的默认包管理工具。通过npm 可以安装、共享、分发代码，管理项目依赖关系。&lt;/p&gt;
&lt;p&gt;npm 由三个独立的部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站；网站 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。&lt;/li&gt;
&lt;li&gt;注册表（registry）；注册表 是一个巨大的数据库，保存了每个包（package）的信息。&lt;/li&gt;
&lt;li&gt;命令行工具 (CLI)；CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="NPM" scheme="https://perkins4j2.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+JPA实体自动生成数据库</title>
    <link href="https://perkins4j2.github.io/posts/4871/"/>
    <id>https://perkins4j2.github.io/posts/4871/</id>
    <published>2019-10-12T08:04:53.000Z</published>
    <updated>2019-10-12T08:06:30.050Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;POM&quot;&gt;&lt;a href=&quot;#POM&quot; class=&quot;headerlink&quot; title=&quot;POM&quot;&gt;&lt;/a&gt;POM&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;引入SpringBoot&lt;/li&gt;
&lt;li&gt;引入Jpa
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SpringBoot" scheme="https://perkins4j2.github.io/tags/SpringBoot/"/>
    
      <category term="JPA" scheme="https://perkins4j2.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Maven自定义Parent并集成SpringBoot</title>
    <link href="https://perkins4j2.github.io/posts/53117/"/>
    <id>https://perkins4j2.github.io/posts/53117/</id>
    <published>2019-10-12T02:54:02.000Z</published>
    <updated>2019-10-12T08:31:47.195Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自定义Parent&quot;&gt;&lt;a href=&quot;#自定义Parent&quot; class=&quot;headerlink&quot; title=&quot;自定义Parent&quot;&gt;&lt;/a&gt;自定义Parent&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.xx.xx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;xx-parent&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Maven" scheme="https://perkins4j2.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SaaS多租户数据库方案</title>
    <link href="https://perkins4j2.github.io/posts/20124/"/>
    <id>https://perkins4j2.github.io/posts/20124/</id>
    <published>2019-10-10T03:35:03.000Z</published>
    <updated>2019-10-10T03:37:14.678Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方案选择&quot;&gt;&lt;a href=&quot;#方案选择&quot; class=&quot;headerlink&quot; title=&quot;方案选择&quot;&gt;&lt;/a&gt;方案选择&lt;/h3&gt;&lt;h4 id=&quot;独立数据库&quot;&gt;&lt;a href=&quot;#独立数据库&quot; class=&quot;headerlink&quot; title=&quot;独立数据库&quot;&gt;&lt;/a&gt;独立数据库&lt;/h4&gt;&lt;p&gt;一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。 &lt;/p&gt;
&lt;p&gt;优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。 &lt;/p&gt;
&lt;p&gt;缺点：增多了数据库的安装数量，随之带来维护成本和购置成本的增加。&lt;/p&gt;
&lt;p&gt;这种方案与传统的一个客户、一套数据、一套部署类似，差别只在于软件统一部署在运营商那里。&lt;/p&gt;
&lt;p&gt;如果面对的是银行、医院等需要非常高数据隔离级别的租户，可以选择这种模式，提高租用的定价。如果定价较低，产品走低价路线，这种方案一般对运营商来说是无法承受的。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="多租户" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%A7%9F%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Mybatis+Mycat多租户数据库实现</title>
    <link href="https://perkins4j2.github.io/posts/64375/"/>
    <id>https://perkins4j2.github.io/posts/64375/</id>
    <published>2019-10-10T03:34:49.000Z</published>
    <updated>2019-10-12T08:05:56.255Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mycat&quot;&gt;&lt;a href=&quot;#Mycat&quot; class=&quot;headerlink&quot; title=&quot;Mycat&quot;&gt;&lt;/a&gt;Mycat&lt;/h3&gt;&lt;h4 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://dl.mycat.io/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;p&gt;server.xml，Mycat服务器配置，默认端口8066&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SpringBoot" scheme="https://perkins4j2.github.io/tags/SpringBoot/"/>
    
      <category term="多租户" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%A7%9F%E6%88%B7/"/>
    
      <category term="Mybatis" scheme="https://perkins4j2.github.io/tags/Mybatis/"/>
    
      <category term="Mycat" scheme="https://perkins4j2.github.io/tags/Mycat/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast分区原理</title>
    <link href="https://perkins4j2.github.io/posts/47449/"/>
    <id>https://perkins4j2.github.io/posts/47449/</id>
    <published>2019-10-08T09:21:54.000Z</published>
    <updated>2019-10-08T09:22:37.962Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hazelcast分片&quot;&gt;&lt;a href=&quot;#Hazelcast分片&quot; class=&quot;headerlink&quot; title=&quot;Hazelcast分片&quot;&gt;&lt;/a&gt;Hazelcast分片&lt;/h3&gt;&lt;p&gt;Hazelcast分片被称为分区。&lt;/p&gt;
&lt;p&gt;Hazelcast默认有271个分区。给定key，Hazelcast进行序列化、hash并根据分区数量取模，获取key对应的分区。&lt;/p&gt;
&lt;p&gt;集群内成员的分区是对等的。Hazelcast将分区数据在成员间的区分内进行分布备份和冗余。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast超时配置</title>
    <link href="https://perkins4j2.github.io/posts/63914/"/>
    <id>https://perkins4j2.github.io/posts/63914/</id>
    <published>2019-10-08T08:24:18.000Z</published>
    <updated>2019-10-08T08:25:21.884Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;超时错误&quot;&gt;&lt;a href=&quot;#超时错误&quot; class=&quot;headerlink&quot; title=&quot;超时错误&quot;&gt;&lt;/a&gt;超时错误&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;processor error:com.hazelcast.client.HazelcastClientNotActiveException: Client is shutting down&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;若Hazelcast中成员全部断开，Client则抛出以上异常，此时，连接池连接已无效&lt;/li&gt;
&lt;li&gt;Hazelcast成员重启后，Client继续抛出以上异常，无法重新初始化连接池&lt;/li&gt;
&lt;li&gt;为重新初始化连接，则需要修改重试策略，以便重启成员，且无需重启Client
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hazelcast部署方案</title>
    <link href="https://perkins4j2.github.io/posts/34736/"/>
    <id>https://perkins4j2.github.io/posts/34736/</id>
    <published>2019-10-08T01:09:26.000Z</published>
    <updated>2019-10-08T08:22:47.856Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;p&gt;在/bin目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;start.sh / start.bat: 使用默认配置启动成员实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stop.sh / stop.bat: 停止成员实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cluster.sh: 集群管理, 例如获取和改变集群状态, 关闭或删除数据等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;start.sh / start.bat 启动一个实例。可以解压Hazelcast ZIP 或 TAR.GZ 在多个目录下，启动多个实例。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast介绍和优势</title>
    <link href="https://perkins4j2.github.io/posts/2412/"/>
    <id>https://perkins4j2.github.io/posts/2412/</id>
    <published>2019-10-08T01:09:19.000Z</published>
    <updated>2019-10-08T01:10:50.969Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hazelcast介绍&quot;&gt;&lt;a href=&quot;#Hazelcast介绍&quot; class=&quot;headerlink&quot; title=&quot;Hazelcast介绍&quot;&gt;&lt;/a&gt;Hazelcast介绍&lt;/h3&gt;&lt;p&gt;全称是Hazelcast IMDG (In-Memory Data Grid)，内存数据网格。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开源&lt;/li&gt;
&lt;li&gt;仅需要JAR文件，无需安装其他软件。&lt;/li&gt;
&lt;li&gt;提供类库，不影响业务架构。&lt;/li&gt;
&lt;li&gt;提供开箱即用的分布式数据结构，例如Map, Queue, MultiMap, Topic, Lock and Executor。&lt;/li&gt;
&lt;li&gt;无主概念，没有单点故障，成员都是对等。&lt;/li&gt;
&lt;li&gt;集群动态扩展，新增成员可以弹性提高内存和计算能力。&lt;/li&gt;
&lt;li&gt;数据相互冗余和备份，防止成员宕机导致的数据丢失。&lt;/li&gt;
&lt;li&gt;成员相互感知，区别于传统的kv缓存解决方案。&lt;/li&gt;
&lt;li&gt;可使用SPI构建自定义分布式数据结构&lt;/li&gt;
&lt;li&gt;开源社区长久持续开发
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks配置</title>
    <link href="https://perkins4j2.github.io/posts/44441/"/>
    <id>https://perkins4j2.github.io/posts/44441/</id>
    <published>2019-09-29T01:04:30.000Z</published>
    <updated>2019-09-29T01:13:01.839Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;更新源&quot;&gt;&lt;a href=&quot;#更新源&quot; class=&quot;headerlink&quot; title=&quot;更新源&quot;&gt;&lt;/a&gt;更新源&lt;/h3&gt;&lt;p&gt;如果是新系统，请先刷新软件源及更新软件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Ubuntu 14.04 和 Ubuntu 16.04 用户需新增 PPA 源&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install software-properties-common &amp;amp;&amp;amp; sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev &amp;amp;&amp;amp; sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Shadowsocks" scheme="https://perkins4j2.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>IDEA自定义Archetype</title>
    <link href="https://perkins4j2.github.io/posts/31081/"/>
    <id>https://perkins4j2.github.io/posts/31081/</id>
    <published>2019-09-27T00:55:33.000Z</published>
    <updated>2019-09-27T01:29:34.715Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建自定义骨架&quot;&gt;&lt;a href=&quot;#创建自定义骨架&quot; class=&quot;headerlink&quot; title=&quot;创建自定义骨架&quot;&gt;&lt;/a&gt;创建自定义骨架&lt;/h3&gt;&lt;h4 id=&quot;生成骨架&quot;&gt;&lt;a href=&quot;#生成骨架&quot; class=&quot;headerlink&quot; title=&quot;生成骨架&quot;&gt;&lt;/a&gt;生成骨架&lt;/h4&gt;&lt;p&gt;在maven项目下，执行mvn archetype:create-from-project，在target/generated-sources/archetype目录下生成Archetype project&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="IDEA" scheme="https://perkins4j2.github.io/tags/IDEA/"/>
    
      <category term="工具" scheme="https://perkins4j2.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java8处理空对象之Optional</title>
    <link href="https://perkins4j2.github.io/posts/19687/"/>
    <id>https://perkins4j2.github.io/posts/19687/</id>
    <published>2019-09-26T02:11:16.000Z</published>
    <updated>2019-09-26T02:13:09.896Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Optional&quot;&gt;&lt;a href=&quot;#Optional&quot; class=&quot;headerlink&quot; title=&quot;Optional&quot;&gt;&lt;/a&gt;Optional&lt;/h3&gt;&lt;p&gt;Java8中引入java.util.Optional&lt;t&gt;，这是一个封装Optional值的类。&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;举例来说，如果一个人可能有也可能没有车，那么Person类内部的car变量就不应该声明为Car，遭遇某人没有车时不应该把null引用赋值给它，而是应该将其声明为Optional&lt;car&gt;类型。&lt;/car&gt;&lt;/p&gt;
&lt;p&gt;在代码中始终如一地使用Optional，能非常清晰地界定出变量值的缺失是结构上的问题，还是算法上的缺陷，抑或是数据中的问题。&lt;/p&gt;
&lt;p&gt;引入Optional类的意图并非要消除每一个null引用。与此相反，它的目标是帮助更好地设计出普适的API，以便看到方法签名，就能了解它是否接受一个Optional的值。这种强制会积极的将变量从Optional中解包出来，直面缺失的变量值。&lt;br&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java8" scheme="https://perkins4j2.github.io/tags/Java8/"/>
    
      <category term="Lambda" scheme="https://perkins4j2.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>JVM调试命令</title>
    <link href="https://perkins4j2.github.io/posts/9582/"/>
    <id>https://perkins4j2.github.io/posts/9582/</id>
    <published>2019-09-25T00:49:03.000Z</published>
    <updated>2019-09-25T01:49:47.551Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GC日志&quot;&gt;&lt;a href=&quot;#GC日志&quot; class=&quot;headerlink&quot; title=&quot;GC日志&quot;&gt;&lt;/a&gt;GC日志&lt;/h3&gt;&lt;p&gt;打开GC日志&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-server -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -Xloggc:./logs/gc.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jmap&quot;&gt;&lt;a href=&quot;#jmap&quot; class=&quot;headerlink&quot; title=&quot;jmap&quot;&gt;&lt;/a&gt;jmap&lt;/h3&gt;&lt;p&gt;生成 java 程序的 dump 文件， 也可以查看堆内对象示例的统计信息、查看 ClassLoader 的信息以及 finalizer 队列。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Java8" scheme="https://perkins4j2.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Nginx及配置</title>
    <link href="https://perkins4j2.github.io/posts/65243/"/>
    <id>https://perkins4j2.github.io/posts/65243/</id>
    <published>2019-09-25T00:48:40.000Z</published>
    <updated>2019-09-25T01:49:47.550Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker search nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name docker.io/nginx &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OFFICIAL ok&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker images nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name nginx-test -p 9803:80 -d nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="nginx" scheme="https://perkins4j2.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>解决MySql死锁脚本</title>
    <link href="https://perkins4j2.github.io/posts/10641/"/>
    <id>https://perkins4j2.github.io/posts/10641/</id>
    <published>2019-09-25T00:48:13.000Z</published>
    <updated>2019-09-25T01:49:47.552Z</updated>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp_file=/tmp/my_process_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HOST=&lt;span class=&quot;string&quot;&gt;&#39;xx-01&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER=&lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS=&lt;span class=&quot;string&quot;&gt;&#39;xxxxxx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -u &lt;span class=&quot;variable&quot;&gt;$&amp;#123;USER&amp;#125;&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PASS&amp;#125;&lt;/span&gt; -P3306 --protocol=tcp -h &lt;span class=&quot;variable&quot;&gt;$&amp;#123;HOST&amp;#125;&lt;/span&gt; mysql -e &lt;span class=&quot;string&quot;&gt;&quot;show processlist&quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;tmp_file&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `grep &lt;span class=&quot;string&quot;&gt;&#39;table level lock&#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;tmp_file&amp;#125;&lt;/span&gt; | grep -v &lt;span class=&quot;string&quot;&gt;&#39;system user&#39;&lt;/span&gt; | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt;`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; mysql -u &lt;span class=&quot;variable&quot;&gt;$&amp;#123;USER&amp;#125;&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PASS&amp;#125;&lt;/span&gt; -P3306 --protocol=tcp -h &lt;span class=&quot;variable&quot;&gt;$&amp;#123;HOST&amp;#125;&lt;/span&gt; mysql -e &lt;span class=&quot;string&quot;&gt;&quot;kill &lt;span class=&quot;variable&quot;&gt;$l&lt;/span&gt;;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="死锁" scheme="https://perkins4j2.github.io/tags/%E6%AD%BB%E9%94%81/"/>
    
      <category term="mysql" scheme="https://perkins4j2.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast Client配置</title>
    <link href="https://perkins4j2.github.io/posts/354/"/>
    <id>https://perkins4j2.github.io/posts/354/</id>
    <published>2019-09-12T13:08:19.000Z</published>
    <updated>2019-09-12T13:11:23.754Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最大value&quot;&gt;&lt;a href=&quot;#最大value&quot; class=&quot;headerlink&quot; title=&quot;最大value&quot;&gt;&lt;/a&gt;最大value&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单个k-v的操作本身不受数据字节大小限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作受最大堆内存-Xmx限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作受超时时间限制hazelcast.max.operation.timeout&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO HazelcastTest - size:273437KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO HazelcastTest - elapsed:62ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast性能评估</title>
    <link href="https://perkins4j2.github.io/posts/19102/"/>
    <id>https://perkins4j2.github.io/posts/19102/</id>
    <published>2019-09-12T13:07:31.000Z</published>
    <updated>2019-09-12T13:11:23.755Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基准测试&quot;&gt;&lt;a href=&quot;#基准测试&quot; class=&quot;headerlink&quot; title=&quot;基准测试&quot;&gt;&lt;/a&gt;基准测试&lt;/h3&gt;&lt;p&gt;基于benchmarking tool&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO  Performance IntByteMapTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total throughput        100.00%      7,948,805 ops   128,179.66 ops/s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Agent C_A1            100.00%      7,948,805 ops   128,179.66 ops/s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int-int每秒可完成17W请求，并发线程10，随机读写，写概率0.1，读0.9&lt;/li&gt;
&lt;li&gt;int-byte每秒13万请求，value最大2k，并发线程10，随机读写，写概率0.1，读0.9
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Hazelcast</title>
    <link href="https://perkins4j2.github.io/posts/39886/"/>
    <id>https://perkins4j2.github.io/posts/39886/</id>
    <published>2019-09-12T13:07:18.000Z</published>
    <updated>2019-09-12T13:11:23.753Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hazelcast-management-center&quot;&gt;&lt;a href=&quot;#Hazelcast-management-center&quot; class=&quot;headerlink&quot; title=&quot;Hazelcast management-center&quot;&gt;&lt;/a&gt;Hazelcast management-center&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull hazelcast/management-center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d -p 8200:8080 hazelcast/management-center:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装配置管理节点，监控和实时查看缓存情况&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 多线程状态</title>
    <link href="https://perkins4j2.github.io/posts/80/"/>
    <id>https://perkins4j2.github.io/posts/80/</id>
    <published>2019-09-10T01:03:44.000Z</published>
    <updated>2019-09-11T01:24:38.851Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;6种状态&quot;&gt;&lt;a href=&quot;#6种状态&quot; class=&quot;headerlink&quot; title=&quot;6种状态&quot;&gt;&lt;/a&gt;6种状态&lt;/h3&gt;&lt;p&gt;线程可以有如下6种状态:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New (新创建)&lt;/li&gt;
&lt;li&gt;Runnable
        
      
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - Join、Yield和Sleep</title>
    <link href="https://perkins4j2.github.io/posts/36650/"/>
    <id>https://perkins4j2.github.io/posts/36650/</id>
    <published>2019-09-09T11:28:57.000Z</published>
    <updated>2019-09-11T01:24:38.850Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Join&quot;&gt;&lt;a href=&quot;#Join&quot; class=&quot;headerlink&quot; title=&quot;Join&quot;&gt;&lt;/a&gt;Join&lt;/h3&gt;&lt;p&gt;join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行。&lt;/p&gt;
&lt;p&gt;son.join()被调用的地方是发生在“Father主线程”中，但是son.join()是通过“子线程son”去调用的join()，父线程调用wait()的作用是让“当前线程”等待，而这里的“当前线程”是指当前在CPU上运行的线程。所以，虽然是调用子线程的wait()方法，但是它是通过“主线程”去调用的；所以，休眠的是主线程，而不是“子线程”！&lt;/p&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
