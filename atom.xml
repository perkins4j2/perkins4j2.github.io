<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perkins4j2的技术博客</title>
  
  <subtitle>一个人,一根烧火棍,面对整个世界.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://perkins4j2.github.io/"/>
  <updated>2019-11-18T12:14:16.948Z</updated>
  <id>https://perkins4j2.github.io/</id>
  
  <author>
    <name>Perkins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>散列算法</title>
    <link href="https://perkins4j2.github.io/posts/64783/"/>
    <id>https://perkins4j2.github.io/posts/64783/</id>
    <published>2019-11-18T12:13:12.000Z</published>
    <updated>2019-11-18T12:14:16.948Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何为散列&quot;&gt;&lt;a href=&quot;#何为散列&quot; class=&quot;headerlink&quot; title=&quot;何为散列&quot;&gt;&lt;/a&gt;何为散列&lt;/h3&gt;&lt;p&gt;散列（Hash）也称为哈希，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，这个输出值就是散列值。&lt;/p&gt;
&lt;p&gt;散列算法的宗旨就是：构造冲突较低的散列地址，保证散列表中数据的离散度。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="散列" scheme="https://perkins4j2.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Kafka消费配置</title>
    <link href="https://perkins4j2.github.io/posts/39128/"/>
    <id>https://perkins4j2.github.io/posts/39128/</id>
    <published>2019-11-18T12:10:58.000Z</published>
    <updated>2019-11-18T12:12:11.024Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;offset&quot;&gt;&lt;a href=&quot;#offset&quot; class=&quot;headerlink&quot; title=&quot;offset&quot;&gt;&lt;/a&gt;offset&lt;/h3&gt;&lt;p&gt;在Kafka中无论是producer往topic中写数据,还是consumer从topic中读数据,都避免不了和offset打交道,关于offset主要有以下几个概念。&lt;/p&gt;
&lt;p&gt;Last Committed Offset&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consumer group最新一次 commit 的 offset，表示这个 group 已经把 Last Committed Offset 之前的数据都消费成功了。
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Consumer手动提交Kafka偏移量和Rebalance</title>
    <link href="https://perkins4j2.github.io/posts/32177/"/>
    <id>https://perkins4j2.github.io/posts/32177/</id>
    <published>2019-11-18T12:07:45.000Z</published>
    <updated>2019-11-18T12:12:15.482Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;再均衡是指分区的所属权从一个消费者转移到另一个消费者的行为，再均衡期间，消费组内的消费组无法读取消息。&lt;/p&gt;
&lt;p&gt;消费者需要自己保留一个offset，从kafka 获取消息时，只拉去当前offset以后的消息。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>二进制按位与&amp;及求余数</title>
    <link href="https://perkins4j2.github.io/posts/19120/"/>
    <id>https://perkins4j2.github.io/posts/19120/</id>
    <published>2019-11-18T06:06:00.000Z</published>
    <updated>2019-11-18T06:06:55.214Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;按位与-amp&quot;&gt;&lt;a href=&quot;#按位与-amp&quot; class=&quot;headerlink&quot; title=&quot;按位与&amp;amp;&quot;&gt;&lt;/a&gt;按位与&amp;amp;&lt;/h3&gt;&lt;h4 id=&quot;移位&quot;&gt;&lt;a href=&quot;#移位&quot; class=&quot;headerlink&quot; title=&quot;移位&quot;&gt;&lt;/a&gt;移位&lt;/h4&gt;&lt;p&gt;运算规则：0&amp;amp;0=0; 0&amp;amp;1=0; 1&amp;amp;0=0; 1&amp;amp;1=1;&lt;/p&gt;
&lt;p&gt;在移位运算中我们可知，计算机中的数据都是0和1的序列，当我们把某个数字左移一位，该数字会扩大为原来的2倍；而将其右移一位时，该数字就会缩小为原来的1/2，即相当于对该数字做了一次被2整除的运算。&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;p&gt;11的二进制是1011，如果右移一位的话，将变成0101，也就是5。&lt;/p&gt;
&lt;p&gt;现在我们考虑11除以8的余数，很显然是3；因为8是2的3次幂，求余时相当于除以2的3次幂，也就是把1011右移3位，该过程会把1011的低3位011给移走，事实上，这个被移走的011就是11除以8的余数！&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="按位与" scheme="https://perkins4j2.github.io/tags/%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    
  </entry>
  
  <entry>
    <title>Snowflake根据设备生成15位ID</title>
    <link href="https://perkins4j2.github.io/posts/19968/"/>
    <id>https://perkins4j2.github.io/posts/19968/</id>
    <published>2019-11-18T02:23:35.000Z</published>
    <updated>2019-11-18T02:24:38.567Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Snowflake&quot;&gt;&lt;a href=&quot;#Snowflake&quot; class=&quot;headerlink&quot; title=&quot;Snowflake&quot;&gt;&lt;/a&gt;Snowflake&lt;/h3&gt;&lt;p&gt;snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。&lt;/p&gt;
&lt;p&gt;其核心思想是，生成64位即一个long类型的递增序列Id，保障有序及不重复，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用41bit作为毫秒数，&lt;/li&gt;
&lt;li&gt;10bit作为机器的ID，5个bit是数据中心，5个bit的机器ID&lt;/li&gt;
&lt;li&gt;12bit作为毫秒内的流水号，意味着每个节点在每毫秒可以产生 4096个ID&lt;/li&gt;
&lt;li&gt;最后还有一个符号位，永远是0
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Snowflake" scheme="https://perkins4j2.github.io/tags/Snowflake/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="https://perkins4j2.github.io/posts/53101/"/>
    <id>https://perkins4j2.github.io/posts/53101/</id>
    <published>2019-11-18T01:01:37.000Z</published>
    <updated>2019-11-18T02:24:38.565Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h3&gt;&lt;h4 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot; class=&quot;headerlink&quot; title=&quot;创建分支&quot;&gt;&lt;/a&gt;创建分支&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;br&gt;如git branch testing&lt;/p&gt;
&lt;h4 id=&quot;切换分支&quot;&gt;&lt;a href=&quot;#切换分支&quot; class=&quot;headerlink&quot; title=&quot;切换分支&quot;&gt;&lt;/a&gt;切换分支&lt;/h4&gt;&lt;p&gt;从当前所处的分支切换到其他分支&lt;br&gt;&lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;br&gt;如git checkout testing；&lt;br&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Git" scheme="https://perkins4j2.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Canal日志增量订阅和消费</title>
    <link href="https://perkins4j2.github.io/posts/53545/"/>
    <id>https://perkins4j2.github.io/posts/53545/</id>
    <published>2019-11-18T01:00:24.000Z</published>
    <updated>2019-11-18T02:24:38.562Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基于日志增量订阅和消费的业务&quot;&gt;&lt;a href=&quot;#基于日志增量订阅和消费的业务&quot; class=&quot;headerlink&quot; title=&quot;基于日志增量订阅和消费的业务&quot;&gt;&lt;/a&gt;基于日志增量订阅和消费的业务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据库镜像&lt;/li&gt;
&lt;li&gt;数据库实时备份&lt;/li&gt;
&lt;li&gt;索引构建和实时维护(拆分异构索引、倒排索引等)&lt;/li&gt;
&lt;li&gt;业务 cache 刷新&lt;/li&gt;
&lt;li&gt;带业务逻辑的增量数据处理
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Canal" scheme="https://perkins4j2.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast持久化及优化</title>
    <link href="https://perkins4j2.github.io/posts/53779/"/>
    <id>https://perkins4j2.github.io/posts/53779/</id>
    <published>2019-11-11T09:15:18.000Z</published>
    <updated>2019-11-11T09:17:06.635Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据内存格式&quot;&gt;&lt;a href=&quot;#数据内存格式&quot; class=&quot;headerlink&quot; title=&quot;数据内存格式&quot;&gt;&lt;/a&gt;数据内存格式&lt;/h3&gt;&lt;p&gt;参数:in-memory-format,有3种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BINARY&lt;br&gt;  默认，数据k-v均二进制。&lt;br&gt;  适合绝大多数put、get等操作，效率最高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OBJECT&lt;br&gt;  数据存储为对象反序列化，适合对象复杂查询操作，避免反序列时间消耗。&lt;br&gt;  k为二进制，v为对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NATIVE&lt;br&gt;  企业版，二进制格式，存储在非堆空间，避免GC。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Java8新变化</title>
    <link href="https://perkins4j2.github.io/posts/3769/"/>
    <id>https://perkins4j2.github.io/posts/3769/</id>
    <published>2019-10-24T01:27:30.000Z</published>
    <updated>2019-10-24T01:29:52.726Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java8优势&quot;&gt;&lt;a href=&quot;#Java8优势&quot; class=&quot;headerlink&quot; title=&quot;Java8优势&quot;&gt;&lt;/a&gt;Java8优势&lt;/h3&gt;&lt;p&gt;自1998年JDK1.0（Java1.0）发布以来,从Java1.1（1997年）-Java7（2011年），Java不断升级,Java8则是在2014年3月发布。&lt;/p&gt;
&lt;h4 id=&quot;流处理&quot;&gt;&lt;a href=&quot;#流处理&quot; class=&quot;headerlink&quot; title=&quot;流处理&quot;&gt;&lt;/a&gt;流处理&lt;/h4&gt;&lt;p&gt;Java 8在java.util.stream中添加了一个Stream API;Stream&lt;t&gt;可以看成一种迭代器。&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;Stream API的可以链接形成一个复杂的流水线，就像Unix命令。&lt;/p&gt;
&lt;p&gt;可以在一个更高的抽象层次上写Java8程序，把这样的流变成那样的流(就像写数据库查询语句时的那种思路)，而不是一次只处理一个项目。&lt;/p&gt;
&lt;p&gt;Java8可以透明地把输入的不相关部分拿到几个CPU内核上去分别执行。Stream操作流水线——这是几乎免费的并行，用不着去费劲搞Thread。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Java8" scheme="https://perkins4j2.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast队列和发布订阅实现</title>
    <link href="https://perkins4j2.github.io/posts/48149/"/>
    <id>https://perkins4j2.github.io/posts/48149/</id>
    <published>2019-10-16T01:55:40.000Z</published>
    <updated>2019-10-16T01:57:06.962Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;队列和订阅区别&quot;&gt;&lt;a href=&quot;#队列和订阅区别&quot; class=&quot;headerlink&quot; title=&quot;队列和订阅区别&quot;&gt;&lt;/a&gt;队列和订阅区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;队列是queue，订阅是topic&lt;/li&gt;
&lt;li&gt;队列是只能被消费一次，订阅是被消费多次&lt;/li&gt;
&lt;li&gt;队列消费是主动轮询take，订阅是消息被动通知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;队列实现&quot;&gt;&lt;a href=&quot;#队列实现&quot; class=&quot;headerlink&quot; title=&quot;队列实现&quot;&gt;&lt;/a&gt;队列实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;采用FIFO先进先出顺序消费&lt;/li&gt;
&lt;li&gt;元素没有批量处理，只能迭代逐个take&lt;/li&gt;
&lt;li&gt;元素被复制到本地处理&lt;/li&gt;
&lt;li&gt;可能使用ItemListener监听队列新增和删除操作
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Gradle安装和IDEA配置</title>
    <link href="https://perkins4j2.github.io/posts/52236/"/>
    <id>https://perkins4j2.github.io/posts/52236/</id>
    <published>2019-10-12T12:10:58.000Z</published>
    <updated>2019-10-12T12:11:44.106Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载地址&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;https://gradle.org/releases/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gradle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择&lt;a href=&quot;https://gradle.org/next-steps/?version=5.6.2&amp;format=bin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二进制包&lt;/a&gt;，包括文档和源码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载V5.6.2，后解压&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Gradle" scheme="https://perkins4j2.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>NPM包管理工具</title>
    <link href="https://perkins4j2.github.io/posts/45569/"/>
    <id>https://perkins4j2.github.io/posts/45569/</id>
    <published>2019-10-12T10:23:51.000Z</published>
    <updated>2019-10-12T10:25:07.893Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;npm 是JavaScript 世界的包管理工具，并且是Node.js 平台的默认包管理工具。通过npm 可以安装、共享、分发代码，管理项目依赖关系。&lt;/p&gt;
&lt;p&gt;npm 由三个独立的部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站；网站 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。&lt;/li&gt;
&lt;li&gt;注册表（registry）；注册表 是一个巨大的数据库，保存了每个包（package）的信息。&lt;/li&gt;
&lt;li&gt;命令行工具 (CLI)；CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="NPM" scheme="https://perkins4j2.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+JPA实体自动生成数据库</title>
    <link href="https://perkins4j2.github.io/posts/4871/"/>
    <id>https://perkins4j2.github.io/posts/4871/</id>
    <published>2019-10-12T08:04:53.000Z</published>
    <updated>2019-10-12T08:06:30.050Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;POM&quot;&gt;&lt;a href=&quot;#POM&quot; class=&quot;headerlink&quot; title=&quot;POM&quot;&gt;&lt;/a&gt;POM&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;引入SpringBoot&lt;/li&gt;
&lt;li&gt;引入Jpa
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SpringBoot" scheme="https://perkins4j2.github.io/tags/SpringBoot/"/>
    
      <category term="JPA" scheme="https://perkins4j2.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Maven自定义Parent并集成SpringBoot</title>
    <link href="https://perkins4j2.github.io/posts/53117/"/>
    <id>https://perkins4j2.github.io/posts/53117/</id>
    <published>2019-10-12T02:54:02.000Z</published>
    <updated>2019-10-12T08:31:47.195Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自定义Parent&quot;&gt;&lt;a href=&quot;#自定义Parent&quot; class=&quot;headerlink&quot; title=&quot;自定义Parent&quot;&gt;&lt;/a&gt;自定义Parent&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.xx.xx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;xx-parent&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Maven" scheme="https://perkins4j2.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SaaS多租户数据库方案</title>
    <link href="https://perkins4j2.github.io/posts/20124/"/>
    <id>https://perkins4j2.github.io/posts/20124/</id>
    <published>2019-10-10T03:35:03.000Z</published>
    <updated>2019-10-10T03:37:14.678Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方案选择&quot;&gt;&lt;a href=&quot;#方案选择&quot; class=&quot;headerlink&quot; title=&quot;方案选择&quot;&gt;&lt;/a&gt;方案选择&lt;/h3&gt;&lt;h4 id=&quot;独立数据库&quot;&gt;&lt;a href=&quot;#独立数据库&quot; class=&quot;headerlink&quot; title=&quot;独立数据库&quot;&gt;&lt;/a&gt;独立数据库&lt;/h4&gt;&lt;p&gt;一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本较高。 &lt;/p&gt;
&lt;p&gt;优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。 &lt;/p&gt;
&lt;p&gt;缺点：增多了数据库的安装数量，随之带来维护成本和购置成本的增加。&lt;/p&gt;
&lt;p&gt;这种方案与传统的一个客户、一套数据、一套部署类似，差别只在于软件统一部署在运营商那里。&lt;/p&gt;
&lt;p&gt;如果面对的是银行、医院等需要非常高数据隔离级别的租户，可以选择这种模式，提高租用的定价。如果定价较低，产品走低价路线，这种方案一般对运营商来说是无法承受的。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="多租户" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%A7%9F%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Mybatis+Mycat多租户数据库实现</title>
    <link href="https://perkins4j2.github.io/posts/64375/"/>
    <id>https://perkins4j2.github.io/posts/64375/</id>
    <published>2019-10-10T03:34:49.000Z</published>
    <updated>2019-10-12T08:05:56.255Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mycat&quot;&gt;&lt;a href=&quot;#Mycat&quot; class=&quot;headerlink&quot; title=&quot;Mycat&quot;&gt;&lt;/a&gt;Mycat&lt;/h3&gt;&lt;h4 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://dl.mycat.io/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;p&gt;server.xml，Mycat服务器配置，默认端口8066&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SpringBoot" scheme="https://perkins4j2.github.io/tags/SpringBoot/"/>
    
      <category term="多租户" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%A7%9F%E6%88%B7/"/>
    
      <category term="Mybatis" scheme="https://perkins4j2.github.io/tags/Mybatis/"/>
    
      <category term="Mycat" scheme="https://perkins4j2.github.io/tags/Mycat/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast分区原理</title>
    <link href="https://perkins4j2.github.io/posts/47449/"/>
    <id>https://perkins4j2.github.io/posts/47449/</id>
    <published>2019-10-08T09:21:54.000Z</published>
    <updated>2019-10-08T09:22:37.962Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hazelcast分片&quot;&gt;&lt;a href=&quot;#Hazelcast分片&quot; class=&quot;headerlink&quot; title=&quot;Hazelcast分片&quot;&gt;&lt;/a&gt;Hazelcast分片&lt;/h3&gt;&lt;p&gt;Hazelcast分片被称为分区。&lt;/p&gt;
&lt;p&gt;Hazelcast默认有271个分区。给定key，Hazelcast进行序列化、hash并根据分区数量取模，获取key对应的分区。&lt;/p&gt;
&lt;p&gt;集群内成员的分区是对等的。Hazelcast将分区数据在成员间的区分内进行分布备份和冗余。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast超时配置</title>
    <link href="https://perkins4j2.github.io/posts/63914/"/>
    <id>https://perkins4j2.github.io/posts/63914/</id>
    <published>2019-10-08T08:24:18.000Z</published>
    <updated>2019-11-11T09:16:06.941Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;超时错误&quot;&gt;&lt;a href=&quot;#超时错误&quot; class=&quot;headerlink&quot; title=&quot;超时错误&quot;&gt;&lt;/a&gt;超时错误&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;processor error:com.hazelcast.client.HazelcastClientNotActiveException: Client is shutting down&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;若Hazelcast中成员全部断开，Client则抛出以上异常，此时，连接池连接已无效&lt;/li&gt;
&lt;li&gt;Hazelcast成员重启后，Client继续抛出以上异常，无法重新初始化连接池&lt;/li&gt;
&lt;li&gt;为重新初始化连接，则需要修改重试策略，以便重启成员，且无需重启Client
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast部署方案</title>
    <link href="https://perkins4j2.github.io/posts/34736/"/>
    <id>https://perkins4j2.github.io/posts/34736/</id>
    <published>2019-10-08T01:09:26.000Z</published>
    <updated>2019-10-08T08:22:47.856Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;p&gt;在/bin目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;start.sh / start.bat: 使用默认配置启动成员实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stop.sh / stop.bat: 停止成员实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cluster.sh: 集群管理, 例如获取和改变集群状态, 关闭或删除数据等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;start.sh / start.bat 启动一个实例。可以解压Hazelcast ZIP 或 TAR.GZ 在多个目录下，启动多个实例。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast介绍和优势</title>
    <link href="https://perkins4j2.github.io/posts/2412/"/>
    <id>https://perkins4j2.github.io/posts/2412/</id>
    <published>2019-10-08T01:09:19.000Z</published>
    <updated>2019-10-08T01:10:50.969Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hazelcast介绍&quot;&gt;&lt;a href=&quot;#Hazelcast介绍&quot; class=&quot;headerlink&quot; title=&quot;Hazelcast介绍&quot;&gt;&lt;/a&gt;Hazelcast介绍&lt;/h3&gt;&lt;p&gt;全称是Hazelcast IMDG (In-Memory Data Grid)，内存数据网格。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开源&lt;/li&gt;
&lt;li&gt;仅需要JAR文件，无需安装其他软件。&lt;/li&gt;
&lt;li&gt;提供类库，不影响业务架构。&lt;/li&gt;
&lt;li&gt;提供开箱即用的分布式数据结构，例如Map, Queue, MultiMap, Topic, Lock and Executor。&lt;/li&gt;
&lt;li&gt;无主概念，没有单点故障，成员都是对等。&lt;/li&gt;
&lt;li&gt;集群动态扩展，新增成员可以弹性提高内存和计算能力。&lt;/li&gt;
&lt;li&gt;数据相互冗余和备份，防止成员宕机导致的数据丢失。&lt;/li&gt;
&lt;li&gt;成员相互感知，区别于传统的kv缓存解决方案。&lt;/li&gt;
&lt;li&gt;可使用SPI构建自定义分布式数据结构&lt;/li&gt;
&lt;li&gt;开源社区长久持续开发
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
</feed>
