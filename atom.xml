<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perkins4j2的技术博客</title>
  
  <subtitle>一个人,一根烧火棍,面对整个世界.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://perkins4j2.github.io/"/>
  <updated>2019-09-26T02:12:34.261Z</updated>
  <id>https://perkins4j2.github.io/</id>
  
  <author>
    <name>Perkins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8处理空对象之Optional</title>
    <link href="https://perkins4j2.github.io/posts/19687/"/>
    <id>https://perkins4j2.github.io/posts/19687/</id>
    <published>2019-09-26T02:11:16.000Z</published>
    <updated>2019-09-26T02:12:34.261Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Optional&quot;&gt;&lt;a href=&quot;#Optional&quot; class=&quot;headerlink&quot; title=&quot;Optional&quot;&gt;&lt;/a&gt;Optional&lt;/h3&gt;&lt;p&gt;Java8中引入java.util.Optional&lt;t&gt;，这是一个封装Optional值的类。&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;举例来说，如果一个人可能有也可能没有车，那么Person类内部的car变量就不应该声明为Car，遭遇某人没有车时不应该把null引用赋值给它，而是应该将其声明为Optional&lt;car&gt;类型。&lt;/car&gt;&lt;/p&gt;
&lt;p&gt;在代码中始终如一地使用Optional，能非常清晰地界定出变量值的缺失是结构上的问题，还是算法上的缺陷，抑或是数据中的问题。&lt;/p&gt;
&lt;p&gt;引入Optional类的意图并非要消除每一个null引用。与此相反，它的目标是帮助更好地设计出普适的API，以便看到方法签名，就能了解它是否接受一个Optional的值。这种强制会积极的将变量从Optional中解包出来，直面缺失的变量值。&lt;br&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java8" scheme="https://perkins4j2.github.io/tags/Java8/"/>
    
      <category term="Lambda" scheme="https://perkins4j2.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>JVM调试命令</title>
    <link href="https://perkins4j2.github.io/posts/9582/"/>
    <id>https://perkins4j2.github.io/posts/9582/</id>
    <published>2019-09-25T00:49:03.000Z</published>
    <updated>2019-09-25T01:49:47.551Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GC日志&quot;&gt;&lt;a href=&quot;#GC日志&quot; class=&quot;headerlink&quot; title=&quot;GC日志&quot;&gt;&lt;/a&gt;GC日志&lt;/h3&gt;&lt;p&gt;打开GC日志&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-server -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -Xloggc:./logs/gc.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jmap&quot;&gt;&lt;a href=&quot;#jmap&quot; class=&quot;headerlink&quot; title=&quot;jmap&quot;&gt;&lt;/a&gt;jmap&lt;/h3&gt;&lt;p&gt;生成 java 程序的 dump 文件， 也可以查看堆内对象示例的统计信息、查看 ClassLoader 的信息以及 finalizer 队列。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Java8" scheme="https://perkins4j2.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Nginx及配置</title>
    <link href="https://perkins4j2.github.io/posts/65243/"/>
    <id>https://perkins4j2.github.io/posts/65243/</id>
    <published>2019-09-25T00:48:40.000Z</published>
    <updated>2019-09-25T01:49:47.550Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker search nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name docker.io/nginx &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OFFICIAL ok&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker images nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name nginx-test -p 9803:80 -d nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="nginx" scheme="https://perkins4j2.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>解决MySql死锁脚本</title>
    <link href="https://perkins4j2.github.io/posts/10641/"/>
    <id>https://perkins4j2.github.io/posts/10641/</id>
    <published>2019-09-25T00:48:13.000Z</published>
    <updated>2019-09-25T01:49:47.552Z</updated>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp_file=/tmp/my_process_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HOST=&lt;span class=&quot;string&quot;&gt;&#39;xx-01&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER=&lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS=&lt;span class=&quot;string&quot;&gt;&#39;xxxxxx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -u &lt;span class=&quot;variable&quot;&gt;$&amp;#123;USER&amp;#125;&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PASS&amp;#125;&lt;/span&gt; -P3306 --protocol=tcp -h &lt;span class=&quot;variable&quot;&gt;$&amp;#123;HOST&amp;#125;&lt;/span&gt; mysql -e &lt;span class=&quot;string&quot;&gt;&quot;show processlist&quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;tmp_file&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `grep &lt;span class=&quot;string&quot;&gt;&#39;table level lock&#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;tmp_file&amp;#125;&lt;/span&gt; | grep -v &lt;span class=&quot;string&quot;&gt;&#39;system user&#39;&lt;/span&gt; | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt;`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; mysql -u &lt;span class=&quot;variable&quot;&gt;$&amp;#123;USER&amp;#125;&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PASS&amp;#125;&lt;/span&gt; -P3306 --protocol=tcp -h &lt;span class=&quot;variable&quot;&gt;$&amp;#123;HOST&amp;#125;&lt;/span&gt; mysql -e &lt;span class=&quot;string&quot;&gt;&quot;kill &lt;span class=&quot;variable&quot;&gt;$l&lt;/span&gt;;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="死锁" scheme="https://perkins4j2.github.io/tags/%E6%AD%BB%E9%94%81/"/>
    
      <category term="mysql" scheme="https://perkins4j2.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast Client配置</title>
    <link href="https://perkins4j2.github.io/posts/354/"/>
    <id>https://perkins4j2.github.io/posts/354/</id>
    <published>2019-09-12T13:08:19.000Z</published>
    <updated>2019-09-12T13:11:23.754Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最大value&quot;&gt;&lt;a href=&quot;#最大value&quot; class=&quot;headerlink&quot; title=&quot;最大value&quot;&gt;&lt;/a&gt;最大value&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单个k-v的操作本身不受数据字节大小限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作受最大堆内存-Xmx限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作受超时时间限制hazelcast.max.operation.timeout&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO HazelcastTest - size:273437KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO HazelcastTest - elapsed:62ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast性能评估</title>
    <link href="https://perkins4j2.github.io/posts/19102/"/>
    <id>https://perkins4j2.github.io/posts/19102/</id>
    <published>2019-09-12T13:07:31.000Z</published>
    <updated>2019-09-12T13:11:23.755Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基准测试&quot;&gt;&lt;a href=&quot;#基准测试&quot; class=&quot;headerlink&quot; title=&quot;基准测试&quot;&gt;&lt;/a&gt;基准测试&lt;/h3&gt;&lt;p&gt;基于benchmarking tool&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO  Performance IntByteMapTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total throughput        100.00%      7,948,805 ops   128,179.66 ops/s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Agent C_A1            100.00%      7,948,805 ops   128,179.66 ops/s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int-int每秒可完成17W请求，并发线程10，随机读写，写概率0.1，读0.9&lt;/li&gt;
&lt;li&gt;int-byte每秒13万请求，value最大2k，并发线程10，随机读写，写概率0.1，读0.9
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Hazelcast</title>
    <link href="https://perkins4j2.github.io/posts/39886/"/>
    <id>https://perkins4j2.github.io/posts/39886/</id>
    <published>2019-09-12T13:07:18.000Z</published>
    <updated>2019-09-12T13:11:23.753Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hazelcast-management-center&quot;&gt;&lt;a href=&quot;#Hazelcast-management-center&quot; class=&quot;headerlink&quot; title=&quot;Hazelcast management-center&quot;&gt;&lt;/a&gt;Hazelcast management-center&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull hazelcast/management-center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d -p 8200:8080 hazelcast/management-center:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装配置管理节点，监控和实时查看缓存情况&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 多线程状态</title>
    <link href="https://perkins4j2.github.io/posts/80/"/>
    <id>https://perkins4j2.github.io/posts/80/</id>
    <published>2019-09-10T01:03:44.000Z</published>
    <updated>2019-09-11T01:24:38.851Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;6种状态&quot;&gt;&lt;a href=&quot;#6种状态&quot; class=&quot;headerlink&quot; title=&quot;6种状态&quot;&gt;&lt;/a&gt;6种状态&lt;/h3&gt;&lt;p&gt;线程可以有如下6种状态:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New (新创建)&lt;/li&gt;
&lt;li&gt;Runnable
        
      
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - Join、Yield和Sleep</title>
    <link href="https://perkins4j2.github.io/posts/36650/"/>
    <id>https://perkins4j2.github.io/posts/36650/</id>
    <published>2019-09-09T11:28:57.000Z</published>
    <updated>2019-09-11T01:24:38.850Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Join&quot;&gt;&lt;a href=&quot;#Join&quot; class=&quot;headerlink&quot; title=&quot;Join&quot;&gt;&lt;/a&gt;Join&lt;/h3&gt;&lt;p&gt;join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行。&lt;/p&gt;
&lt;p&gt;son.join()被调用的地方是发生在“Father主线程”中，但是son.join()是通过“子线程son”去调用的join()，父线程调用wait()的作用是让“当前线程”等待，而这里的“当前线程”是指当前在CPU上运行的线程。所以，虽然是调用子线程的wait()方法，但是它是通过“主线程”去调用的；所以，休眠的是主线程，而不是“子线程”！&lt;/p&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 管道输入和输出流</title>
    <link href="https://perkins4j2.github.io/posts/18201/"/>
    <id>https://perkins4j2.github.io/posts/18201/</id>
    <published>2019-09-09T11:28:46.000Z</published>
    <updated>2019-09-11T01:24:38.852Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java管道&quot;&gt;&lt;a href=&quot;#Java管道&quot; class=&quot;headerlink&quot; title=&quot;Java管道&quot;&gt;&lt;/a&gt;Java管道&lt;/h3&gt;&lt;p&gt;管道连接输入流和输出流。&lt;/p&gt;
&lt;p&gt;管道I/O基于生产者 - 消费者模式，其中生产者产生数据，而消费者消费数据。在管道I/O中，创建两个流代表管道的两端。&lt;/p&gt;
&lt;p&gt;PipedOutputStream对象表示流的一端，PipedInputStream对象则表示流的另一端。使用两个对象的connect()方法连接两端。&lt;br&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="多线程" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 多线程wait和notify</title>
    <link href="https://perkins4j2.github.io/posts/48047/"/>
    <id>https://perkins4j2.github.io/posts/48047/</id>
    <published>2019-09-09T01:21:33.000Z</published>
    <updated>2019-09-09T01:38:08.651Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;等待-通知机制&quot;&gt;&lt;a href=&quot;#等待-通知机制&quot; class=&quot;headerlink&quot; title=&quot;等待/通知机制&quot;&gt;&lt;/a&gt;等待/通知机制&lt;/h3&gt;&lt;p&gt;等待/通知机制，是指一个线程A调用了对象O的wait()方法进入等待状态，而另一个线程B调用了对象O的notify()或者notifyAll()方法，线程A收到通知后从对象O的wait()方法返回，进而&lt;br&gt;执行后续操作。&lt;/p&gt;
&lt;p&gt;上述两个线程通过对象O来完成交互，而对象上的wait()和notify/notifyAll()的&lt;br&gt;关系就如同开关信号一样，用来完成等待方和通知方之间的交互工作。&lt;br&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="多线程" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 线程终结</title>
    <link href="https://perkins4j2.github.io/posts/52791/"/>
    <id>https://perkins4j2.github.io/posts/52791/</id>
    <published>2019-09-05T01:05:00.000Z</published>
    <updated>2019-09-05T01:22:02.944Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;中断状态是线程的一个标识位，而中断操作是一种简便的线程间交互&lt;br&gt;方式，而这种交互方式最适合用来取消或停止任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除了中断以外，还可以利用一个boolean变量来控制是否需要停止任务并终止该线程。&lt;/p&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="多线程" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 线程中断</title>
    <link href="https://perkins4j2.github.io/posts/45493/"/>
    <id>https://perkins4j2.github.io/posts/45493/</id>
    <published>2019-09-03T01:09:41.000Z</published>
    <updated>2019-09-11T01:12:11.432Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;中断可以理解为线程的一个标识位属性，它表示一个运行中的线程是否被其他线程进行了中断操作。中断好比其他线程对该线程打了个招呼，其他线程通过调用该线程的interrupt()&lt;br&gt;方法对其进行中断操作。&lt;br&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="多线程" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程艺术 - 多线程构造和启动</title>
    <link href="https://perkins4j2.github.io/posts/58008/"/>
    <id>https://perkins4j2.github.io/posts/58008/</id>
    <published>2019-08-29T01:22:22.000Z</published>
    <updated>2019-08-29T01:42:51.848Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造线程&quot;&gt;&lt;a href=&quot;#构造线程&quot; class=&quot;headerlink&quot; title=&quot;构造线程&quot;&gt;&lt;/a&gt;构造线程&lt;/h3&gt;&lt;p&gt;在运行线程之前首先要构造一个线程对象，线程对象在构造的时候需要提供线程所需要的属性，如线程所属的线程组、线程优先级、是否是Daemon线程等信息。&lt;/p&gt;
&lt;h3 id=&quot;线程启动&quot;&gt;&lt;a href=&quot;#线程启动&quot; class=&quot;headerlink&quot; title=&quot;线程启动&quot;&gt;&lt;/a&gt;线程启动&lt;/h3&gt;&lt;p&gt;线程对象在初始化完成之后，调用start()方法就可以启动这个线程。&lt;/p&gt;
&lt;p&gt;线程start()方法的含当前线程（即parent线程）同步告知Java虚拟机，只要线程规划器空闲，应立即启动调用()方法的线程。&lt;/p&gt;
&lt;p&gt;注意 启动一个线程前，最好为这个线程设置线程名称，因为这样在使用jstack分析或者进行问题排查时，就会给开发人员提供一些提示，自定义的线程最好能够起个名字。&lt;/p&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://perkins4j2.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java并发编程" scheme="https://perkins4j2.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="多线程" scheme="https://perkins4j2.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Maven自定义打包脚本</title>
    <link href="https://perkins4j2.github.io/posts/26061/"/>
    <id>https://perkins4j2.github.io/posts/26061/</id>
    <published>2019-08-23T01:04:46.000Z</published>
    <updated>2019-08-27T13:09:14.051Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;利用Maven脚本，实现以下需求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将第三方lib单独打包&lt;/li&gt;
&lt;li&gt;将脚本单独打包&lt;/li&gt;
&lt;li&gt;将执行jar单独打包&lt;/li&gt;
&lt;li&gt;将配置文件单独打包&lt;/li&gt;
&lt;li&gt;自动关闭和启动进程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Maven" scheme="https://perkins4j2.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java Collection Sort之IllegalArgumentException</title>
    <link href="https://perkins4j2.github.io/posts/63757/"/>
    <id>https://perkins4j2.github.io/posts/63757/</id>
    <published>2019-08-22T00:53:53.000Z</published>
    <updated>2019-08-22T01:13:56.256Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java-lang-IllegalArgumentException-Comparison-method-violates-its-general-contract&quot;&gt;&lt;a href=&quot;#java-lang-IllegalArgumentException-Comparison-method-violates-its-general-contract&quot; class=&quot;headerlink&quot; title=&quot;java.lang.IllegalArgumentException: Comparison method violates its general contract!&quot;&gt;&lt;/a&gt;java.lang.IllegalArgumentException: Comparison method violates its general contract!&lt;/h3&gt;&lt;p&gt;在 JDK 7 版本以上， Comparator 要满足自反性，传递性，对称性，不然Arrays.sort、Collections.sort会报 IllegalArgumentException 异常。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://perkins4j2.github.io/categories/Java/"/>
    
    
      <category term="Sort" scheme="https://perkins4j2.github.io/tags/Sort/"/>
    
      <category term="Comparator" scheme="https://perkins4j2.github.io/tags/Comparator/"/>
    
  </entry>
  
  <entry>
    <title>Java双份对象数据热切换</title>
    <link href="https://perkins4j2.github.io/posts/42352/"/>
    <id>https://perkins4j2.github.io/posts/42352/</id>
    <published>2019-08-21T12:07:22.000Z</published>
    <updated>2019-08-22T00:37:09.165Z</updated>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当前副本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; r1 = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第二个副本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; r2 = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AtomicBoolean replicationIsEmpty = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AtomicBoolean();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="数据切换" scheme="https://perkins4j2.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>WatchService监控目录和文件变化</title>
    <link href="https://perkins4j2.github.io/posts/34381/"/>
    <id>https://perkins4j2.github.io/posts/34381/</id>
    <published>2019-08-21T12:06:32.000Z</published>
    <updated>2019-09-05T01:20:09.655Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;两种监控文件和目录方式&quot;&gt;&lt;a href=&quot;#两种监控文件和目录方式&quot; class=&quot;headerlink&quot; title=&quot;两种监控文件和目录方式&quot;&gt;&lt;/a&gt;两种监控文件和目录方式&lt;/h3&gt;&lt;h4 id=&quot;Commons-io&quot;&gt;&lt;a href=&quot;#Commons-io&quot; class=&quot;headerlink&quot; title=&quot;Commons-io&quot;&gt;&lt;/a&gt;Commons-io&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在Apache的Commons-io提供文件的监控功能。&lt;/li&gt;
&lt;li&gt;由文件监控类FileAlterationMonitor中的线程不停的扫描文件观察器FileAlterationObserver。&lt;/li&gt;
&lt;li&gt;如果有文件的变化，则根据相关的文件比较器，判断文件时新增，还是删除，还是更改。（默认为1000毫秒执行一次扫描）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;WatchService&quot;&gt;&lt;a href=&quot;#WatchService&quot; class=&quot;headerlink&quot; title=&quot;WatchService&quot;&gt;&lt;/a&gt;WatchService&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Java1.7中提供了NIO WatchService来监控系统中文件的变化。&lt;/li&gt;
&lt;li&gt;该监控是基于操作系统的文件系统监控器，可以监控系统是所有文件的变化，这种监控是无需遍历、无需比较的，是一种基于信号收发的监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个监控目录文件操作的流程大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取 WatchService&lt;/li&gt;
&lt;li&gt;注册指定目录的监视器&lt;/li&gt;
&lt;li&gt;等待目录下的文件发生变化&lt;/li&gt;
&lt;li&gt;对发生变化的文件进行操作
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="WatchService" scheme="https://perkins4j2.github.io/tags/WatchService/"/>
    
  </entry>
  
  <entry>
    <title>RPC框架 - Thrift协议定义</title>
    <link href="https://perkins4j2.github.io/posts/45936/"/>
    <id>https://perkins4j2.github.io/posts/45936/</id>
    <published>2019-08-19T01:12:30.000Z</published>
    <updated>2019-08-19T01:43:26.987Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;rpc&quot;&gt;&lt;a href=&quot;#rpc&quot; class=&quot;headerlink&quot; title=&quot;rpc&quot;&gt;&lt;/a&gt;rpc&lt;/h3&gt;&lt;p&gt;RPC 是远程过程调用（Remote Procedure Call）。&lt;/p&gt;
&lt;p&gt;RPC 是指计算机 A 上的进程，调用另外一台计算机 B 上的进程，其中 A 上的调用进程被挂起，而 B 上的被调用进程开始执行，当值返回给 A 时，A 进程继续执行。调用方可以通过使用参数将信息传送给被调用方，而后可以通过传回的结果得到信息。&lt;/p&gt;
&lt;p&gt;远程过程调用采用客户机/服务器(C/S)模式。请求程序就是一个客户机，而服务提供程序就是一台服务器。和常规或本地过程调用一样，远程过程调用是同步操作，在远程过程结果返回之前，需要暂时中止请求程序。使用相同地址空间的低权进程或低权线程允许同时运行多个远程过程调用。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="thrift" scheme="https://perkins4j2.github.io/tags/thrift/"/>
    
      <category term="rpc" scheme="https://perkins4j2.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>Lucene利用Hanlp分词索引和检索</title>
    <link href="https://perkins4j2.github.io/posts/49532/"/>
    <id>https://perkins4j2.github.io/posts/49532/</id>
    <published>2019-08-19T00:58:20.000Z</published>
    <updated>2019-08-19T01:10:26.539Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;包引入&quot;&gt;&lt;a href=&quot;#包引入&quot; class=&quot;headerlink&quot; title=&quot;包引入&quot;&gt;&lt;/a&gt;包引入&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pom引入lucene和hanlp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lucene版本为7.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hanlp分词器版本为1.1.6&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.lucene&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;lucene-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;7.4.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.lucene&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;lucene-queryparser&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;7.4.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.hankcs.nlp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;hanlp-lucene-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="lucene" scheme="https://perkins4j2.github.io/tags/lucene/"/>
    
      <category term="hanlp" scheme="https://perkins4j2.github.io/tags/hanlp/"/>
    
  </entry>
  
</feed>
