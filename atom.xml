<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perkins4j2的技术博客</title>
  
  <subtitle>一个人,一根烧火棍,面对整个世界.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://perkins4j2.github.io/"/>
  <updated>2019-11-30T02:01:38.566Z</updated>
  <id>https://perkins4j2.github.io/</id>
  
  <author>
    <name>Perkins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Varint编码</title>
    <link href="https://perkins4j2.github.io/posts/63107/"/>
    <id>https://perkins4j2.github.io/posts/63107/</id>
    <published>2019-11-30T01:55:49.000Z</published>
    <updated>2019-11-30T02:01:38.566Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Varint编码&quot;&gt;&lt;a href=&quot;#什么是Varint编码&quot; class=&quot;headerlink&quot; title=&quot;什么是Varint编码&quot;&gt;&lt;/a&gt;什么是Varint编码&lt;/h3&gt;&lt;p&gt;Varint是一种使用一个或多个字节序列化整数的方法，会把&lt;code&gt;整数&lt;/code&gt;编码为&lt;code&gt;变长字节&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于32位整型的&lt;code&gt;4&lt;/code&gt;个字节数据经过Varint编码后需要&lt;code&gt;1~5&lt;/code&gt;个字节，小的数字使用1个byte，大的数字使用5个bytes。&lt;/p&gt;
&lt;p&gt;64位整型数据编码后占用1~10个字节。在实际场景中小数字的使用率远远多于大数字，因此通过Varint编码对于大部分场景都可以起到很好的压缩效果。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Varint" scheme="https://perkins4j2.github.io/tags/Varint/"/>
    
  </entry>
  
  <entry>
    <title>Kafka解压缩</title>
    <link href="https://perkins4j2.github.io/posts/27626/"/>
    <id>https://perkins4j2.github.io/posts/27626/</id>
    <published>2019-11-30T01:55:40.000Z</published>
    <updated>2019-11-30T02:00:53.659Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;压缩的目的&quot;&gt;&lt;a href=&quot;#压缩的目的&quot; class=&quot;headerlink&quot; title=&quot;压缩的目的&quot;&gt;&lt;/a&gt;压缩的目的&lt;/h3&gt;&lt;p&gt;时间换空间，用CPU时间去换磁盘空间或网络IO传输量。&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;// 开启GZIP压缩&lt;br&gt;// Producer启动后，生产的每个消息集合都会经过GZIP压缩，能够很好地节省网络传输带宽和Kafka Broker端的磁盘占用。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;props.put(&lt;span class=&quot;string&quot;&gt;&quot;compression.type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;gzip&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producer&amp;lt;String, String&amp;gt; producer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; KafkaProducer&amp;lt;&amp;gt;(props);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka Producer配置</title>
    <link href="https://perkins4j2.github.io/posts/38013/"/>
    <id>https://perkins4j2.github.io/posts/38013/</id>
    <published>2019-11-30T01:55:28.000Z</published>
    <updated>2019-11-30T02:00:28.703Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;acks&quot;&gt;&lt;a href=&quot;#acks&quot; class=&quot;headerlink&quot; title=&quot;acks&quot;&gt;&lt;/a&gt;acks&lt;/h3&gt;&lt;p&gt;producer希望leader返回的用于确认请求完成的确认数量. 可选值 all, -1, 0 1. 默认值为1。&lt;/p&gt;
&lt;p&gt;acks=0 不需要等待服务器的确认. 这是retries设置无效. 响应里来自服务端的offset总是-1. producer只管发不管发送成功与否。延迟低，容易丢失数据。&lt;/p&gt;
&lt;p&gt;acks=1 表示leader写入成功（但是并没有刷新到磁盘）后即向producer响应。延迟中等，一旦leader副本挂了，就会丢失数据。&lt;/p&gt;
&lt;p&gt;acks=all等待数据完成副本的复制, 等同于-1. 假如需要保证消息不丢失, 需要使用该设置. 同时需要设置unclean.leader.election.enable为true, 保证当ISR列表为空时, 选择其他存活的副本作为新的leader.&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Maven 打包Plugins集成</title>
    <link href="https://perkins4j2.github.io/posts/22633/"/>
    <id>https://perkins4j2.github.io/posts/22633/</id>
    <published>2019-11-30T01:54:51.000Z</published>
    <updated>2019-11-30T02:00:08.973Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jar冲突检测&lt;/li&gt;
&lt;li&gt;源码编译&lt;/li&gt;
&lt;li&gt;源码生成jar&lt;/li&gt;
&lt;li&gt;pom依赖jar拷贝&lt;/li&gt;
&lt;li&gt;spring boot可执行jar生成&lt;/li&gt;
&lt;li&gt;脚本动态生成&lt;/li&gt;
&lt;li&gt;生成目录和打包tar
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Maven" scheme="https://perkins4j2.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cluster</title>
    <link href="https://perkins4j2.github.io/posts/39943/"/>
    <id>https://perkins4j2.github.io/posts/39943/</id>
    <published>2019-11-30T01:54:41.000Z</published>
    <updated>2019-11-30T01:59:55.922Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Redis-Cluster&quot;&gt;&lt;a href=&quot;#Redis-Cluster&quot; class=&quot;headerlink&quot; title=&quot;Redis Cluster&quot;&gt;&lt;/a&gt;Redis Cluster&lt;/h3&gt;&lt;p&gt;Redis Cluster是Redis3.0版本推出的高可用及分布式解决方案，多个Redis实例组成，数据按照槽(slot)存储分布在多个Redis实例上，通过Gossip流言协议来进行节点之间通信。&lt;/p&gt;
&lt;p&gt;Redis Cluster实现的功能：&lt;/p&gt;
&lt;p&gt;• 将数据分片到多个实例(按照slot存储)；&lt;br&gt;• 集群节点宕掉会自动failover；&lt;br&gt;• 提供相对平滑扩容(缩容)节点。&lt;/p&gt;
&lt;p&gt;Redis Cluster暂未有的：&lt;br&gt;• 实时同步&lt;br&gt;• 强一致性&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="redis" scheme="https://perkins4j2.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis跳表</title>
    <link href="https://perkins4j2.github.io/posts/64570/"/>
    <id>https://perkins4j2.github.io/posts/64570/</id>
    <published>2019-11-30T01:54:32.000Z</published>
    <updated>2019-11-30T01:57:51.211Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;跳表&quot;&gt;&lt;a href=&quot;#跳表&quot; class=&quot;headerlink&quot; title=&quot;跳表&quot;&gt;&lt;/a&gt;跳表&lt;/h3&gt;&lt;p&gt;跳表（skiplist）是一个特俗的链表，相比一般的链表，有更高的查找效率，其效率可比拟于二叉查找树。&lt;/p&gt;
&lt;p&gt;Redis里面使用skiplist是为了实现sorted set这种对外的数据结构。&lt;/p&gt;
&lt;p&gt;跳表预先间隔地保存了有序链表中的节点，从而在查找过程中能达到类似于二分搜索的效果，而二分搜索思想就是通过比较中点数据放弃另一半的查找，从而节省一半的查找时间，缺点即浪费了空间。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="redis" scheme="https://perkins4j2.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Zero-Copy</title>
    <link href="https://perkins4j2.github.io/posts/20850/"/>
    <id>https://perkins4j2.github.io/posts/20850/</id>
    <published>2019-11-30T01:54:20.000Z</published>
    <updated>2019-11-30T01:57:54.781Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Zero-Copy零拷贝&quot;&gt;&lt;a href=&quot;#Zero-Copy零拷贝&quot; class=&quot;headerlink&quot; title=&quot;Zero-Copy零拷贝&quot;&gt;&lt;/a&gt;Zero-Copy零拷贝&lt;/h3&gt;&lt;p&gt;Zero-Copy用于提高Linux平台上的IO密集型的应用程序的性能。能够避免中间缓冲区中的冗余数据复制以及减少Linux内核空间和用户空间上下文交换的次数。&lt;/p&gt;
&lt;p&gt;Zero-Copy使得应用程序从本地磁盘读取数据，再将读取的数据原封不动直接地发送给Socket。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Zero-Copy" scheme="https://perkins4j2.github.io/tags/Zero-Copy/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal原理</title>
    <link href="https://perkins4j2.github.io/posts/46263/"/>
    <id>https://perkins4j2.github.io/posts/46263/</id>
    <published>2019-11-29T07:56:37.000Z</published>
    <updated>2019-11-29T08:01:08.756Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt; CHARSET = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;initialValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="ThreadLocal" scheme="https://perkins4j2.github.io/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>Canal配置</title>
    <link href="https://perkins4j2.github.io/posts/60983/"/>
    <id>https://perkins4j2.github.io/posts/60983/</id>
    <published>2019-11-29T07:46:44.000Z</published>
    <updated>2019-11-29T08:03:34.534Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新增用户和权限&quot;&gt;&lt;a href=&quot;#新增用户和权限&quot; class=&quot;headerlink&quot; title=&quot;新增用户和权限&quot;&gt;&lt;/a&gt;新增用户和权限&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新增用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; canal &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;canal&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 授权REPLICATION权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;REPLICATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SLAVE&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;REPLICATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CLIENT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; *.* &lt;span class=&quot;keyword&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;canal&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;PRIVILEGES&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;grants&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;canal&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看当前db binlog文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;logs&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Canal" scheme="https://perkins4j2.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建kafka</title>
    <link href="https://perkins4j2.github.io/posts/58214/"/>
    <id>https://perkins4j2.github.io/posts/58214/</id>
    <published>2019-11-29T07:45:03.000Z</published>
    <updated>2019-11-29T08:01:08.750Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;搭建zookeeper环境&quot;&gt;&lt;a href=&quot;#搭建zookeeper环境&quot; class=&quot;headerlink&quot; title=&quot;搭建zookeeper环境&quot;&gt;&lt;/a&gt;搭建zookeeper环境&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull zookeeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --restart=always \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -v /opt/docker/zookeeper/zoo1/data:/data \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -v /opt/docker/zookeeper/zoo1/datalog:/datalog \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e ZOO_MY_ID=1 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e ZOO_SERVERS=&lt;span class=&quot;string&quot;&gt;&quot;server.1=zookeeper-A:2888:3888 server.2=zookeeper-B:2888:3888 server.3=zookeeper-C:2888:3888&quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --name=zookeeper-A \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --net=host \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --privileged \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     zookeeper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;指定了–net=host和–privileged选项，使得容器可以使用主机的ip地址和端口进行通信。&lt;/li&gt;
&lt;li&gt;restart=always当Docker重启时，容器能自动启动&lt;/li&gt;
&lt;li&gt;2181：对client端提供服务&lt;/li&gt;
&lt;li&gt;3888：选举leader使用&lt;/li&gt;
&lt;li&gt;2888：集群内机器通讯使用（Leader监听此端口）
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SQL-Server备份</title>
    <link href="https://perkins4j2.github.io/posts/9251/"/>
    <id>https://perkins4j2.github.io/posts/9251/</id>
    <published>2019-11-29T07:44:04.000Z</published>
    <updated>2019-11-29T08:01:08.755Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;备份方案&quot;&gt;&lt;a href=&quot;#备份方案&quot; class=&quot;headerlink&quot; title=&quot;备份方案&quot;&gt;&lt;/a&gt;备份方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/sql/integration-services/backup-restore-and-move-the-ssis-catalog?view=sql-server-2014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSIS（SQL Server Integration Services）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SqlServer" scheme="https://perkins4j2.github.io/tags/SqlServer/"/>
    
  </entry>
  
  <entry>
    <title>Log工具类打印调用者信息</title>
    <link href="https://perkins4j2.github.io/posts/38650/"/>
    <id>https://perkins4j2.github.io/posts/38650/</id>
    <published>2019-11-29T07:43:24.000Z</published>
    <updated>2019-11-29T08:01:08.752Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法调用栈&quot;&gt;&lt;a href=&quot;#方法调用栈&quot; class=&quot;headerlink&quot; title=&quot;方法调用栈&quot;&gt;&lt;/a&gt;方法调用栈&lt;/h3&gt;&lt;p&gt;方法调用栈，在Java 中可以通过两种方法获取到方法调用栈的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(new Throwable()).getStackTrace()&lt;/li&gt;
&lt;li&gt;Thread.currentThread().getStackTrace()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种方式都能返回一个 StackTraceElement 数组，StackTraceElement 对象中包含了类名、方法名、文件名、代码行号这样的信息。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="log" scheme="https://perkins4j2.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf和JSON</title>
    <link href="https://perkins4j2.github.io/posts/3676/"/>
    <id>https://perkins4j2.github.io/posts/3676/</id>
    <published>2019-11-29T07:41:33.000Z</published>
    <updated>2019-11-29T08:01:08.754Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Protobuf&quot;&gt;&lt;a href=&quot;#Protobuf&quot; class=&quot;headerlink&quot; title=&quot;Protobuf&quot;&gt;&lt;/a&gt;Protobuf&lt;/h3&gt;&lt;p&gt;Protobuf是用于允许对结构化数据进行序列化和反序列化。Google开发它的目的是提供一种比XML更好的方法来使系统进行通信。因此，他们专注于使其比XML更简单，更小，更快和更可维护，甚至以更好的性能，更好的可维护性和更小的大小超过了JSON。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="protobuf" scheme="https://perkins4j2.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Canal及MQ顺序性</title>
    <link href="https://perkins4j2.github.io/posts/47529/"/>
    <id>https://perkins4j2.github.io/posts/47529/</id>
    <published>2019-11-29T07:39:54.000Z</published>
    <updated>2019-11-29T08:01:08.747Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;顺序性&quot;&gt;&lt;a href=&quot;#顺序性&quot; class=&quot;headerlink&quot; title=&quot;顺序性&quot;&gt;&lt;/a&gt;顺序性&lt;/h3&gt;&lt;p&gt;Binlog本身是有序的，写入到mq之后需要保障顺序。&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h3&gt;&lt;p&gt;Canal目前选择支持Kafka/Rocketmq，本质上都是基于本地文件的方式来支持了分区级的顺序消息的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Canal" scheme="https://perkins4j2.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>散列算法</title>
    <link href="https://perkins4j2.github.io/posts/64783/"/>
    <id>https://perkins4j2.github.io/posts/64783/</id>
    <published>2019-11-18T12:13:12.000Z</published>
    <updated>2019-11-18T12:14:44.047Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何为散列&quot;&gt;&lt;a href=&quot;#何为散列&quot; class=&quot;headerlink&quot; title=&quot;何为散列&quot;&gt;&lt;/a&gt;何为散列&lt;/h3&gt;&lt;p&gt;散列（Hash）也称为哈希，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，这个输出值就是散列值。&lt;/p&gt;
&lt;p&gt;散列算法的宗旨就是：构造冲突较低的散列地址，保证散列表中数据的离散度。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="散列" scheme="https://perkins4j2.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Kafka消费配置</title>
    <link href="https://perkins4j2.github.io/posts/39128/"/>
    <id>https://perkins4j2.github.io/posts/39128/</id>
    <published>2019-11-18T12:10:58.000Z</published>
    <updated>2019-11-18T12:14:44.045Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;offset&quot;&gt;&lt;a href=&quot;#offset&quot; class=&quot;headerlink&quot; title=&quot;offset&quot;&gt;&lt;/a&gt;offset&lt;/h3&gt;&lt;p&gt;在Kafka中无论是producer往topic中写数据,还是consumer从topic中读数据,都避免不了和offset打交道,关于offset主要有以下几个概念。&lt;/p&gt;
&lt;p&gt;Last Committed Offset&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consumer group最新一次 commit 的 offset，表示这个 group 已经把 Last Committed Offset 之前的数据都消费成功了。
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Consumer手动提交Kafka偏移量和Rebalance</title>
    <link href="https://perkins4j2.github.io/posts/32177/"/>
    <id>https://perkins4j2.github.io/posts/32177/</id>
    <published>2019-11-18T12:07:45.000Z</published>
    <updated>2019-11-18T12:14:44.042Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;再均衡是指分区的所属权从一个消费者转移到另一个消费者的行为，再均衡期间，消费组内的消费组无法读取消息。&lt;/p&gt;
&lt;p&gt;消费者需要自己保留一个offset，从kafka 获取消息时，只拉去当前offset以后的消息。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>二进制按位与&amp;及求余数</title>
    <link href="https://perkins4j2.github.io/posts/19120/"/>
    <id>https://perkins4j2.github.io/posts/19120/</id>
    <published>2019-11-18T06:06:00.000Z</published>
    <updated>2019-11-18T12:14:44.046Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;按位与-amp&quot;&gt;&lt;a href=&quot;#按位与-amp&quot; class=&quot;headerlink&quot; title=&quot;按位与&amp;amp;&quot;&gt;&lt;/a&gt;按位与&amp;amp;&lt;/h3&gt;&lt;h4 id=&quot;移位&quot;&gt;&lt;a href=&quot;#移位&quot; class=&quot;headerlink&quot; title=&quot;移位&quot;&gt;&lt;/a&gt;移位&lt;/h4&gt;&lt;p&gt;运算规则：0&amp;amp;0=0; 0&amp;amp;1=0; 1&amp;amp;0=0; 1&amp;amp;1=1;&lt;/p&gt;
&lt;p&gt;在移位运算中我们可知，计算机中的数据都是0和1的序列，当我们把某个数字左移一位，该数字会扩大为原来的2倍；而将其右移一位时，该数字就会缩小为原来的1/2，即相当于对该数字做了一次被2整除的运算。&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;p&gt;11的二进制是1011，如果右移一位的话，将变成0101，也就是5。&lt;/p&gt;
&lt;p&gt;现在我们考虑11除以8的余数，很显然是3；因为8是2的3次幂，求余时相当于除以2的3次幂，也就是把1011右移3位，该过程会把1011的低3位011给移走，事实上，这个被移走的011就是11除以8的余数！&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="按位与" scheme="https://perkins4j2.github.io/tags/%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    
  </entry>
  
  <entry>
    <title>Snowflake根据设备生成15位ID</title>
    <link href="https://perkins4j2.github.io/posts/19968/"/>
    <id>https://perkins4j2.github.io/posts/19968/</id>
    <published>2019-11-18T02:23:35.000Z</published>
    <updated>2019-11-18T02:24:38.567Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Snowflake&quot;&gt;&lt;a href=&quot;#Snowflake&quot; class=&quot;headerlink&quot; title=&quot;Snowflake&quot;&gt;&lt;/a&gt;Snowflake&lt;/h3&gt;&lt;p&gt;snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。&lt;/p&gt;
&lt;p&gt;其核心思想是，生成64位即一个long类型的递增序列Id，保障有序及不重复，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用41bit作为毫秒数，&lt;/li&gt;
&lt;li&gt;10bit作为机器的ID，5个bit是数据中心，5个bit的机器ID&lt;/li&gt;
&lt;li&gt;12bit作为毫秒内的流水号，意味着每个节点在每毫秒可以产生 4096个ID&lt;/li&gt;
&lt;li&gt;最后还有一个符号位，永远是0
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Snowflake" scheme="https://perkins4j2.github.io/tags/Snowflake/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="https://perkins4j2.github.io/posts/53101/"/>
    <id>https://perkins4j2.github.io/posts/53101/</id>
    <published>2019-11-18T01:01:37.000Z</published>
    <updated>2019-11-29T07:42:58.551Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h3&gt;&lt;h4 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot; class=&quot;headerlink&quot; title=&quot;创建分支&quot;&gt;&lt;/a&gt;创建分支&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;br&gt;如git branch testing&lt;/p&gt;
&lt;h4 id=&quot;切换分支&quot;&gt;&lt;a href=&quot;#切换分支&quot; class=&quot;headerlink&quot; title=&quot;切换分支&quot;&gt;&lt;/a&gt;切换分支&lt;/h4&gt;&lt;p&gt;从当前所处的分支切换到其他分支&lt;br&gt;&lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;br&gt;如git checkout testing；&lt;br&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Git" scheme="https://perkins4j2.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
