<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perkins4j2的技术博客</title>
  
  <subtitle>一个人,一根烧火棍,面对整个世界.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://perkins4j2.github.io/"/>
  <updated>2019-11-29T08:01:08.756Z</updated>
  <id>https://perkins4j2.github.io/</id>
  
  <author>
    <name>Perkins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLocal原理</title>
    <link href="https://perkins4j2.github.io/posts/46263/"/>
    <id>https://perkins4j2.github.io/posts/46263/</id>
    <published>2019-11-29T07:56:37.000Z</published>
    <updated>2019-11-29T08:01:08.756Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt; CHARSET = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;initialValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="ThreadLocal" scheme="https://perkins4j2.github.io/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>Canal配置</title>
    <link href="https://perkins4j2.github.io/posts/60983/"/>
    <id>https://perkins4j2.github.io/posts/60983/</id>
    <published>2019-11-29T07:46:44.000Z</published>
    <updated>2019-11-29T08:03:34.534Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新增用户和权限&quot;&gt;&lt;a href=&quot;#新增用户和权限&quot; class=&quot;headerlink&quot; title=&quot;新增用户和权限&quot;&gt;&lt;/a&gt;新增用户和权限&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新增用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; canal &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;canal&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 授权REPLICATION权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;REPLICATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SLAVE&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;REPLICATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CLIENT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; *.* &lt;span class=&quot;keyword&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;canal&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;PRIVILEGES&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;grants&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;canal&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看当前db binlog文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;logs&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Canal" scheme="https://perkins4j2.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建kafka</title>
    <link href="https://perkins4j2.github.io/posts/58214/"/>
    <id>https://perkins4j2.github.io/posts/58214/</id>
    <published>2019-11-29T07:45:03.000Z</published>
    <updated>2019-11-29T08:01:08.750Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;搭建zookeeper环境&quot;&gt;&lt;a href=&quot;#搭建zookeeper环境&quot; class=&quot;headerlink&quot; title=&quot;搭建zookeeper环境&quot;&gt;&lt;/a&gt;搭建zookeeper环境&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull zookeeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --restart=always \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -v /opt/docker/zookeeper/zoo1/data:/data \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -v /opt/docker/zookeeper/zoo1/datalog:/datalog \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e ZOO_MY_ID=1 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     -e ZOO_SERVERS=&lt;span class=&quot;string&quot;&gt;&quot;server.1=zookeeper-A:2888:3888 server.2=zookeeper-B:2888:3888 server.3=zookeeper-C:2888:3888&quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --name=zookeeper-A \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --net=host \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     --privileged \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     zookeeper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;指定了–net=host和–privileged选项，使得容器可以使用主机的ip地址和端口进行通信。&lt;/li&gt;
&lt;li&gt;restart=always当Docker重启时，容器能自动启动&lt;/li&gt;
&lt;li&gt;2181：对client端提供服务&lt;/li&gt;
&lt;li&gt;3888：选举leader使用&lt;/li&gt;
&lt;li&gt;2888：集群内机器通讯使用（Leader监听此端口）
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="docker" scheme="https://perkins4j2.github.io/tags/docker/"/>
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>SQL-Server备份</title>
    <link href="https://perkins4j2.github.io/posts/9251/"/>
    <id>https://perkins4j2.github.io/posts/9251/</id>
    <published>2019-11-29T07:44:04.000Z</published>
    <updated>2019-11-29T08:01:08.755Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;备份方案&quot;&gt;&lt;a href=&quot;#备份方案&quot; class=&quot;headerlink&quot; title=&quot;备份方案&quot;&gt;&lt;/a&gt;备份方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/sql/integration-services/backup-restore-and-move-the-ssis-catalog?view=sql-server-2014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSIS（SQL Server Integration Services）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SqlServer" scheme="https://perkins4j2.github.io/tags/SqlServer/"/>
    
  </entry>
  
  <entry>
    <title>Log工具类打印调用者信息</title>
    <link href="https://perkins4j2.github.io/posts/38650/"/>
    <id>https://perkins4j2.github.io/posts/38650/</id>
    <published>2019-11-29T07:43:24.000Z</published>
    <updated>2019-11-29T08:01:08.752Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法调用栈&quot;&gt;&lt;a href=&quot;#方法调用栈&quot; class=&quot;headerlink&quot; title=&quot;方法调用栈&quot;&gt;&lt;/a&gt;方法调用栈&lt;/h3&gt;&lt;p&gt;方法调用栈，在Java 中可以通过两种方法获取到方法调用栈的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(new Throwable()).getStackTrace()&lt;/li&gt;
&lt;li&gt;Thread.currentThread().getStackTrace()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种方式都能返回一个 StackTraceElement 数组，StackTraceElement 对象中包含了类名、方法名、文件名、代码行号这样的信息。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="log" scheme="https://perkins4j2.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf和JSON</title>
    <link href="https://perkins4j2.github.io/posts/3676/"/>
    <id>https://perkins4j2.github.io/posts/3676/</id>
    <published>2019-11-29T07:41:33.000Z</published>
    <updated>2019-11-29T08:01:08.754Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Protobuf&quot;&gt;&lt;a href=&quot;#Protobuf&quot; class=&quot;headerlink&quot; title=&quot;Protobuf&quot;&gt;&lt;/a&gt;Protobuf&lt;/h3&gt;&lt;p&gt;Protobuf是用于允许对结构化数据进行序列化和反序列化。Google开发它的目的是提供一种比XML更好的方法来使系统进行通信。因此，他们专注于使其比XML更简单，更小，更快和更可维护，甚至以更好的性能，更好的可维护性和更小的大小超过了JSON。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="protobuf" scheme="https://perkins4j2.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Canal及MQ顺序性</title>
    <link href="https://perkins4j2.github.io/posts/47529/"/>
    <id>https://perkins4j2.github.io/posts/47529/</id>
    <published>2019-11-29T07:39:54.000Z</published>
    <updated>2019-11-29T08:01:08.747Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;顺序性&quot;&gt;&lt;a href=&quot;#顺序性&quot; class=&quot;headerlink&quot; title=&quot;顺序性&quot;&gt;&lt;/a&gt;顺序性&lt;/h3&gt;&lt;p&gt;Binlog本身是有序的，写入到mq之后需要保障顺序。&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h3&gt;&lt;p&gt;Canal目前选择支持Kafka/Rocketmq，本质上都是基于本地文件的方式来支持了分区级的顺序消息的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Canal" scheme="https://perkins4j2.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>散列算法</title>
    <link href="https://perkins4j2.github.io/posts/64783/"/>
    <id>https://perkins4j2.github.io/posts/64783/</id>
    <published>2019-11-18T12:13:12.000Z</published>
    <updated>2019-11-18T12:14:44.047Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何为散列&quot;&gt;&lt;a href=&quot;#何为散列&quot; class=&quot;headerlink&quot; title=&quot;何为散列&quot;&gt;&lt;/a&gt;何为散列&lt;/h3&gt;&lt;p&gt;散列（Hash）也称为哈希，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，这个输出值就是散列值。&lt;/p&gt;
&lt;p&gt;散列算法的宗旨就是：构造冲突较低的散列地址，保证散列表中数据的离散度。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="散列" scheme="https://perkins4j2.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Kafka消费配置</title>
    <link href="https://perkins4j2.github.io/posts/39128/"/>
    <id>https://perkins4j2.github.io/posts/39128/</id>
    <published>2019-11-18T12:10:58.000Z</published>
    <updated>2019-11-18T12:14:44.045Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;offset&quot;&gt;&lt;a href=&quot;#offset&quot; class=&quot;headerlink&quot; title=&quot;offset&quot;&gt;&lt;/a&gt;offset&lt;/h3&gt;&lt;p&gt;在Kafka中无论是producer往topic中写数据,还是consumer从topic中读数据,都避免不了和offset打交道,关于offset主要有以下几个概念。&lt;/p&gt;
&lt;p&gt;Last Committed Offset&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consumer group最新一次 commit 的 offset，表示这个 group 已经把 Last Committed Offset 之前的数据都消费成功了。
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Consumer手动提交Kafka偏移量和Rebalance</title>
    <link href="https://perkins4j2.github.io/posts/32177/"/>
    <id>https://perkins4j2.github.io/posts/32177/</id>
    <published>2019-11-18T12:07:45.000Z</published>
    <updated>2019-11-18T12:14:44.042Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;再均衡是指分区的所属权从一个消费者转移到另一个消费者的行为，再均衡期间，消费组内的消费组无法读取消息。&lt;/p&gt;
&lt;p&gt;消费者需要自己保留一个offset，从kafka 获取消息时，只拉去当前offset以后的消息。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="https://perkins4j2.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>二进制按位与&amp;及求余数</title>
    <link href="https://perkins4j2.github.io/posts/19120/"/>
    <id>https://perkins4j2.github.io/posts/19120/</id>
    <published>2019-11-18T06:06:00.000Z</published>
    <updated>2019-11-18T12:14:44.046Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;按位与-amp&quot;&gt;&lt;a href=&quot;#按位与-amp&quot; class=&quot;headerlink&quot; title=&quot;按位与&amp;amp;&quot;&gt;&lt;/a&gt;按位与&amp;amp;&lt;/h3&gt;&lt;h4 id=&quot;移位&quot;&gt;&lt;a href=&quot;#移位&quot; class=&quot;headerlink&quot; title=&quot;移位&quot;&gt;&lt;/a&gt;移位&lt;/h4&gt;&lt;p&gt;运算规则：0&amp;amp;0=0; 0&amp;amp;1=0; 1&amp;amp;0=0; 1&amp;amp;1=1;&lt;/p&gt;
&lt;p&gt;在移位运算中我们可知，计算机中的数据都是0和1的序列，当我们把某个数字左移一位，该数字会扩大为原来的2倍；而将其右移一位时，该数字就会缩小为原来的1/2，即相当于对该数字做了一次被2整除的运算。&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;p&gt;11的二进制是1011，如果右移一位的话，将变成0101，也就是5。&lt;/p&gt;
&lt;p&gt;现在我们考虑11除以8的余数，很显然是3；因为8是2的3次幂，求余时相当于除以2的3次幂，也就是把1011右移3位，该过程会把1011的低3位011给移走，事实上，这个被移走的011就是11除以8的余数！&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="按位与" scheme="https://perkins4j2.github.io/tags/%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    
  </entry>
  
  <entry>
    <title>Snowflake根据设备生成15位ID</title>
    <link href="https://perkins4j2.github.io/posts/19968/"/>
    <id>https://perkins4j2.github.io/posts/19968/</id>
    <published>2019-11-18T02:23:35.000Z</published>
    <updated>2019-11-18T02:24:38.567Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Snowflake&quot;&gt;&lt;a href=&quot;#Snowflake&quot; class=&quot;headerlink&quot; title=&quot;Snowflake&quot;&gt;&lt;/a&gt;Snowflake&lt;/h3&gt;&lt;p&gt;snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。&lt;/p&gt;
&lt;p&gt;其核心思想是，生成64位即一个long类型的递增序列Id，保障有序及不重复，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用41bit作为毫秒数，&lt;/li&gt;
&lt;li&gt;10bit作为机器的ID，5个bit是数据中心，5个bit的机器ID&lt;/li&gt;
&lt;li&gt;12bit作为毫秒内的流水号，意味着每个节点在每毫秒可以产生 4096个ID&lt;/li&gt;
&lt;li&gt;最后还有一个符号位，永远是0
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Snowflake" scheme="https://perkins4j2.github.io/tags/Snowflake/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="https://perkins4j2.github.io/posts/53101/"/>
    <id>https://perkins4j2.github.io/posts/53101/</id>
    <published>2019-11-18T01:01:37.000Z</published>
    <updated>2019-11-29T07:42:58.551Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h3&gt;&lt;h4 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot; class=&quot;headerlink&quot; title=&quot;创建分支&quot;&gt;&lt;/a&gt;创建分支&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;br&gt;如git branch testing&lt;/p&gt;
&lt;h4 id=&quot;切换分支&quot;&gt;&lt;a href=&quot;#切换分支&quot; class=&quot;headerlink&quot; title=&quot;切换分支&quot;&gt;&lt;/a&gt;切换分支&lt;/h4&gt;&lt;p&gt;从当前所处的分支切换到其他分支&lt;br&gt;&lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;br&gt;如git checkout testing；&lt;br&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Git" scheme="https://perkins4j2.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Canal日志增量订阅和消费</title>
    <link href="https://perkins4j2.github.io/posts/53545/"/>
    <id>https://perkins4j2.github.io/posts/53545/</id>
    <published>2019-11-18T01:00:24.000Z</published>
    <updated>2019-11-19T03:03:57.495Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基于日志增量订阅和消费的业务&quot;&gt;&lt;a href=&quot;#基于日志增量订阅和消费的业务&quot; class=&quot;headerlink&quot; title=&quot;基于日志增量订阅和消费的业务&quot;&gt;&lt;/a&gt;基于日志增量订阅和消费的业务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据库镜像&lt;/li&gt;
&lt;li&gt;数据库实时备份&lt;/li&gt;
&lt;li&gt;索引构建和实时维护(拆分异构索引、倒排索引等)&lt;/li&gt;
&lt;li&gt;业务 cache 刷新&lt;/li&gt;
&lt;li&gt;带业务逻辑的增量数据处理
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Canal" scheme="https://perkins4j2.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast持久化及优化</title>
    <link href="https://perkins4j2.github.io/posts/53779/"/>
    <id>https://perkins4j2.github.io/posts/53779/</id>
    <published>2019-11-11T09:15:18.000Z</published>
    <updated>2019-11-18T12:23:44.523Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据内存格式&quot;&gt;&lt;a href=&quot;#数据内存格式&quot; class=&quot;headerlink&quot; title=&quot;数据内存格式&quot;&gt;&lt;/a&gt;数据内存格式&lt;/h3&gt;&lt;p&gt;参数:in-memory-format,有3种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BINARY&lt;br&gt;  默认，数据k-v均二进制。&lt;br&gt;  适合绝大多数put、get等操作，效率最高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OBJECT&lt;br&gt;  数据存储为对象反序列化，适合对象复杂查询操作，避免反序列时间消耗。&lt;br&gt;  k为二进制，v为对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NATIVE&lt;br&gt;  企业版，二进制格式，存储在非堆空间，避免GC。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Java8新变化</title>
    <link href="https://perkins4j2.github.io/posts/3769/"/>
    <id>https://perkins4j2.github.io/posts/3769/</id>
    <published>2019-10-24T01:27:30.000Z</published>
    <updated>2019-10-24T01:29:52.726Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java8优势&quot;&gt;&lt;a href=&quot;#Java8优势&quot; class=&quot;headerlink&quot; title=&quot;Java8优势&quot;&gt;&lt;/a&gt;Java8优势&lt;/h3&gt;&lt;p&gt;自1998年JDK1.0（Java1.0）发布以来,从Java1.1（1997年）-Java7（2011年），Java不断升级,Java8则是在2014年3月发布。&lt;/p&gt;
&lt;h4 id=&quot;流处理&quot;&gt;&lt;a href=&quot;#流处理&quot; class=&quot;headerlink&quot; title=&quot;流处理&quot;&gt;&lt;/a&gt;流处理&lt;/h4&gt;&lt;p&gt;Java 8在java.util.stream中添加了一个Stream API;Stream&lt;t&gt;可以看成一种迭代器。&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;Stream API的可以链接形成一个复杂的流水线，就像Unix命令。&lt;/p&gt;
&lt;p&gt;可以在一个更高的抽象层次上写Java8程序，把这样的流变成那样的流(就像写数据库查询语句时的那种思路)，而不是一次只处理一个项目。&lt;/p&gt;
&lt;p&gt;Java8可以透明地把输入的不相关部分拿到几个CPU内核上去分别执行。Stream操作流水线——这是几乎免费的并行，用不着去费劲搞Thread。&lt;/p&gt;
    
    </summary>
    
      <category term="工具利器" scheme="https://perkins4j2.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Java8" scheme="https://perkins4j2.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Hazelcast队列和发布订阅实现</title>
    <link href="https://perkins4j2.github.io/posts/48149/"/>
    <id>https://perkins4j2.github.io/posts/48149/</id>
    <published>2019-10-16T01:55:40.000Z</published>
    <updated>2019-10-16T01:57:06.962Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;队列和订阅区别&quot;&gt;&lt;a href=&quot;#队列和订阅区别&quot; class=&quot;headerlink&quot; title=&quot;队列和订阅区别&quot;&gt;&lt;/a&gt;队列和订阅区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;队列是queue，订阅是topic&lt;/li&gt;
&lt;li&gt;队列是只能被消费一次，订阅是被消费多次&lt;/li&gt;
&lt;li&gt;队列消费是主动轮询take，订阅是消息被动通知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;队列实现&quot;&gt;&lt;a href=&quot;#队列实现&quot; class=&quot;headerlink&quot; title=&quot;队列实现&quot;&gt;&lt;/a&gt;队列实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;采用FIFO先进先出顺序消费&lt;/li&gt;
&lt;li&gt;元素没有批量处理，只能迭代逐个take&lt;/li&gt;
&lt;li&gt;元素被复制到本地处理&lt;/li&gt;
&lt;li&gt;可能使用ItemListener监听队列新增和删除操作
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Hazelcast" scheme="https://perkins4j2.github.io/tags/Hazelcast/"/>
    
  </entry>
  
  <entry>
    <title>Gradle安装和IDEA配置</title>
    <link href="https://perkins4j2.github.io/posts/52236/"/>
    <id>https://perkins4j2.github.io/posts/52236/</id>
    <published>2019-10-12T12:10:58.000Z</published>
    <updated>2019-10-12T12:11:44.106Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载地址&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;https://gradle.org/releases/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gradle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择&lt;a href=&quot;https://gradle.org/next-steps/?version=5.6.2&amp;format=bin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二进制包&lt;/a&gt;，包括文档和源码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载V5.6.2，后解压&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Gradle" scheme="https://perkins4j2.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>NPM包管理工具</title>
    <link href="https://perkins4j2.github.io/posts/45569/"/>
    <id>https://perkins4j2.github.io/posts/45569/</id>
    <published>2019-10-12T10:23:51.000Z</published>
    <updated>2019-10-12T10:25:07.893Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;npm 是JavaScript 世界的包管理工具，并且是Node.js 平台的默认包管理工具。通过npm 可以安装、共享、分发代码，管理项目依赖关系。&lt;/p&gt;
&lt;p&gt;npm 由三个独立的部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站；网站 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。&lt;/li&gt;
&lt;li&gt;注册表（registry）；注册表 是一个巨大的数据库，保存了每个包（package）的信息。&lt;/li&gt;
&lt;li&gt;命令行工具 (CLI)；CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="NPM" scheme="https://perkins4j2.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+JPA实体自动生成数据库</title>
    <link href="https://perkins4j2.github.io/posts/4871/"/>
    <id>https://perkins4j2.github.io/posts/4871/</id>
    <published>2019-10-12T08:04:53.000Z</published>
    <updated>2019-10-12T08:06:30.050Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;POM&quot;&gt;&lt;a href=&quot;#POM&quot; class=&quot;headerlink&quot; title=&quot;POM&quot;&gt;&lt;/a&gt;POM&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;引入SpringBoot&lt;/li&gt;
&lt;li&gt;引入Jpa
    
    </summary>
    
      <category term="架构" scheme="https://perkins4j2.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="SpringBoot" scheme="https://perkins4j2.github.io/tags/SpringBoot/"/>
    
      <category term="JPA" scheme="https://perkins4j2.github.io/tags/JPA/"/>
    
  </entry>
  
</feed>
